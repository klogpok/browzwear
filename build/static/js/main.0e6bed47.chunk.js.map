{"version":3,"sources":["components/Country.js","components/CountriesList.js","components/City.js","components/CitiesList.js","components/Company.js","components/CompaniesList.js","components/MapContainer.js","components/App.js","index.js"],"names":["Country","state","selected","classes","_this$props","this","props","country","onSelectCountry","push","react_default","a","createElement","className","join","onClick","name","Component","CountriesList","renderCountries","_this","countries","map","index","components_Country","key","React","City","city","onSelectCity","CitiesList","renderCities","cities","components_City","Company","company","onSelectCompany","CompaniesList","renderCompanies","companies","components_Company","MapContainer","_React$Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","_this$props$center","center","lat","lng","dist","google","zoom","style","width","height","initialCenter","parseFloat","title","position","GoogleApiWrapper","apiKey","App","customers","selectedCountry","selectedCity","selectedCompany","isInitial","sortCountries","reduce","acc","curr","includes","keys","sort","b","length","sortCities","CompanyName","sortCompanies","indexOf","_callee","updatedCountries","regenerator_default","wrap","_context","prev","next","item","objectSpread","setState","stop","updatedCities","_callee2","address","updatedCompanies","_context2","find","concat","Address","getLocation","sent","Geocode","setApiKey","fromAddress","then","response","results","geometry","location","_this2","fetch","res","json","data","Customers","components_CountriesList","components_CitiesList","components_CompaniesList","components_MapContainer","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"gQA2BeA,oNAxBbC,MAAQ,CACNC,UAAU,2EAIV,IAAMC,EAAU,GADTC,EAE8BC,KAAKC,MAAlCC,EAFDH,EAECG,QAASC,EAFVJ,EAEUI,gBAOjB,OALID,EAAQL,UACVC,EAAQM,KAAK,YAKbC,EAAAC,EAAAC,cAAA,MACEC,UAAWV,EAAQW,KAAK,KACxBC,QAAS,kBAAMP,EAAgBD,KAE9BA,EAAQS,aAnBKC,cCoBPC,6MAlBbC,gBAAkB,WAChB,OAAOC,EAAKd,MAAMe,UAAUC,IAAI,SAACf,EAASgB,GACxC,OACEb,EAAAC,EAAAC,cAACY,EAAD,CACEC,IAAKF,EACLf,gBAAiBY,EAAKd,MAAME,gBAC5BD,QAASA,+EAQf,OAAOG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOR,KAAKc,0BAfTO,IAAMT,WCiBnBU,mLAhBX,IAAMxB,EAAU,GADTC,EAEwBC,KAAKC,MAA5BsB,EAFDxB,EAECwB,KAAMC,EAFPzB,EAEOyB,aAOd,OALID,EAAK1B,UACPC,EAAQM,KAAK,YAKbC,EAAAC,EAAAC,cAAA,MAAIC,UAAWV,EAAQW,KAAK,KAAMC,QAAS,kBAAMc,EAAaD,KAC3DA,EAAKZ,aAZKC,aCgBJa,6MAdbC,aAAe,WACb,OAAOX,EAAKd,MAAM0B,OAAOV,IAAI,SAACM,EAAML,GAClC,OACEb,EAAAC,EAAAC,cAACqB,EAAD,CAAMR,IAAKF,EAAOK,KAAMA,EAAMC,aAAcT,EAAKd,MAAMuB,0FAO3D,OAAOnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOR,KAAK0B,uBAXZL,IAAMT,WCmBhBiB,mLAlBX,IAAM/B,EAAU,GADTC,EAE8BC,KAAKC,MAAlC6B,EAFD/B,EAEC+B,QAASC,EAFVhC,EAEUgC,gBAMjB,OAJID,EAAQjC,UACVC,EAAQM,KAAK,YAIbC,EAAAC,EAAAC,cAAA,MACEC,UAAWV,EAAQW,KAAK,KACxBC,QAAS,kBAAMqB,EAAgBD,KAE9BA,EAAQnB,aAdKC,aCmBPoB,6MAjBbC,gBAAkB,WAChB,OAAOlB,EAAKd,MAAMiC,UAAUjB,IAAI,SAACa,EAASZ,GACxC,OACEb,EAAAC,EAAAC,cAAC4B,EAAD,CACEf,IAAKF,EACLY,QAASA,EACTC,gBAAiBhB,EAAKd,MAAM8B,6FAOlC,OAAO1B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeR,KAAKiC,0BAdjBZ,IAAMT,mBCArBwB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAtC,KAAAoC,GAAAE,OAAAE,EAAA,EAAAF,CAAAtC,KAAAsC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,MAAA1C,KAAA2C,YAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAF,EAAAC,GAAAC,OAAAO,EAAA,EAAAP,CAAAF,EAAA,EAAAhB,IAAA,SAAA0B,MAAA,WAEI,IADOC,EAMc/C,KAAKC,MAAM+C,OAAxBC,EANDF,EAMCE,IAAKC,EANNH,EAMMG,IAEb,OACE7C,EAAAC,EAAAC,cAAC4C,EAAA,IAAD,CACEC,OAAQpD,KAAKC,MAAMmD,OACnBC,KAAM,GACNC,MAXU,CACZC,MAAO,QACPC,OAAQ,SAUNC,cAAe,CACbR,IAAKS,WAAWT,GAChBC,IAAKQ,WAAWR,IAElBF,OAAQ,CACNC,IAAKS,WAAWT,GAChBC,IAAKQ,WAAWR,KAGlB7C,EAAAC,EAAAC,cAAC4C,EAAA,OAAD,CACEQ,MAAO3D,KAAKC,MAAM0D,MAClBhD,KAAMX,KAAKC,MAAM0D,MACjBC,SAAU,CAAEX,IAAKS,WAAWT,GAAMC,IAAKQ,WAAWR,WA1B5Dd,EAAA,CAAkCf,IAAMT,WAiCzBiD,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZzB,oBCmMY2B,6MAhObnE,MAAQ,CACNoE,UAAW,GACXhD,UAAW,GACXW,OAAQ,GACRsC,gBAAiB,GACjBC,aAAc,GACdC,gBAAiB,GACjBC,WAAW,EACXpB,OAAQ,MAkBVqB,cAAgB,SAAAL,GACd,IAAMhD,EAAYgD,EAAUM,OAAO,SAACC,EAAKC,GAQvC,OAPIA,EAAK7E,WAAW4E,EACbA,EAAIC,EAAK7E,SAAS8E,SAASD,EAAKlD,OACnCiD,EAAIC,EAAK7E,SAASS,KAAKoE,EAAKlD,MAG9BiD,EAAIC,EAAK7E,SAAW,CAAC6E,EAAKlD,MAErBiD,GACN,IAMH,OAJwBjC,OAAOoC,KAAK1D,GAAW2D,KAC7C,SAACrE,EAAGsE,GAAJ,OAAU5D,EAAU4D,GAAGC,OAAS7D,EAAUV,GAAGuE,SAGxB5D,IAAI,SAACf,EAASgB,GACnC,MAAO,CAAEP,KAAMT,EAASL,UAAU,QAMtCiF,WAAa,SAAA5E,GACX,IAAMyB,EAASZ,EAAKnB,MAAMoE,UAAUM,OAAO,SAACC,EAAKC,GAU/C,OATItE,IAAYsE,EAAK7E,UACf6E,EAAKlD,QAAQiD,EACVA,EAAIC,EAAKlD,MAAMmD,SAASD,EAAKO,cAChCR,EAAIC,EAAKlD,MAAMlB,KAAKoE,EAAKO,aAG3BR,EAAIC,EAAKlD,MAAQ,CAACkD,EAAKO,cAGpBR,GACN,IAMH,OAJqBjC,OAAOoC,KAAK/C,GAAQgD,KACvC,SAACrE,EAAGsE,GAAJ,OAAUjD,EAAOiD,GAAGC,OAASlD,EAAOrB,GAAGuE,SAGrB5D,IAAI,SAAAM,GACtB,MAAO,CAAEZ,KAAMY,EAAM1B,UAAU,QAMnCmF,cAAgB,SAAAzD,GAUd,OATkBR,EAAKnB,MAAMoE,UAAUM,OAAO,SAACC,EAAKC,GAIlD,OAHIjD,EAAKZ,OAAS6D,EAAKlD,OACkB,IAAnCiD,EAAIU,QAAQT,EAAKO,cAAqBR,EAAInE,KAAKoE,EAAKO,aAEnDR,GACN,IAE+BI,OAEX1D,IAAI,SAAAa,GACzB,MAAO,CAAEnB,KAAMmB,EAASjC,UAAU,QAItCM,sDAAkB,SAAA+E,EAAMhF,GAAN,IAAAiF,EAAAjB,EAAAvC,EAAA,OAAAyD,EAAA9E,EAAA+E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACVL,EAAmBpE,EAAKnB,MAAMoB,UAAUC,IAAI,SAAAwE,GAAI,OACpDA,EAAK9E,OAAST,EAAQS,KAAtB2B,OAAAoD,EAAA,EAAApD,CAAA,GACSmD,EADT,CACe5F,UAAU,IADzByC,OAAAoD,EAAA,EAAApD,CAAA,GAESmD,EAFT,CAEe5F,UAAU,MAGvBqE,EAAenD,EAAKnB,MAAMsE,aAC1BvC,EAASZ,EAAK+D,WAAW5E,EAAQS,OAEhCI,EAAKnB,MAAMsE,cAAgBnD,EAAKnB,MAAMwE,UACzCF,EAAevC,EAAO,GACbZ,EAAKnB,MAAMsE,eAAiBnD,EAAKnB,MAAMwE,YAChDF,EAAe,IAGjBnD,EAAK4E,SACH,CACE3E,UAAWmE,EACXlB,gBAAiB/D,EACjByB,SACAuC,gBAEF,kBAAMnD,EAAKS,aAAa0C,KAvBV,wBAAAoB,EAAAM,SAAAV,EAAAlF,iEA2BlBwB,aAAe,SAAAD,GACb,IAAMsE,EAAgB9E,EAAKnB,MAAM+B,OAAOV,IAAI,SAAAwE,GAAI,OAC9CA,EAAK9E,OAASY,EAAKZ,KAAnB2B,OAAAoD,EAAA,EAAApD,CAAA,GACSmD,EADT,CACe5F,UAAU,IADzByC,OAAAoD,EAAA,EAAApD,CAAA,GAESmD,EAFT,CAEe5F,UAAU,MAGvBsE,EAAkBpD,EAAKnB,MAAMuE,gBAC7BjC,EAAYnB,EAAKiE,cAAczD,IAE9BR,EAAKnB,MAAMuE,iBAAmBpD,EAAKnB,MAAMwE,YAC5CD,EAAkBjC,EAAU,GAE5BnB,EAAK4E,SACH,CACEhE,OAAQkE,EACR3B,aAAc3C,EACdW,YACAiC,kBACAC,WAAW,GAEb,kBAAMrD,EAAKgB,gBAAgBoC,MAI/BpD,EAAK4E,SAAS,CACZhE,OAAQkE,EACR3B,aAAc3C,EACdW,iBAIJH,sDAAkB,SAAA+D,EAAMhE,GAAN,IAAAqC,EAAA4B,EAAA/C,EAAAgD,EAAA,OAAAZ,EAAA9E,EAAA+E,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,cACVrB,EAAkBpD,EAAKnB,MAAMoE,UAAUkC,KAC3C,SAAAT,GAAI,OAAIA,EAAKV,cAAgBjD,EAAQnB,OAGjCoF,EALU,GAAAI,OAKGhC,EAAgBxE,QALnB,KAAAwG,OAK8BhC,EAAgB7C,KAL9C,KAAA6E,OAMdhC,EAAgBiC,SANFH,EAAAT,KAAA,EASKzE,EAAKsF,YAAYN,GATtB,OASV/C,EATUiD,EAAAK,KAWVN,EAAmBjF,EAAKnB,MAAMsC,UAAUjB,IAAI,SAAAwE,GAChD,OAAOA,EAAK9E,OAASmB,EAAQnB,KAAtB2B,OAAAoD,EAAA,EAAApD,CAAA,GACEmD,EADF,CACQ5F,UAAU,IADlByC,OAAAoD,EAAA,EAAApD,CAAA,GAEEmD,EAFF,CAEQ5F,UAAU,MAG3BkB,EAAK4E,SAAS,CACZzD,UAAW8D,EACX7B,gBAAgB7B,OAAAoD,EAAA,EAAApD,CAAA,GAAMR,EAAP,CAAgBjC,UAAU,IACzCmD,WApBc,wBAAAiD,EAAAL,SAAAE,EAAA9F,iEAwBlBqG,YAAc,SAAAN,GAGZ,OAFAQ,IAAQC,UAAU,2CAEXD,IAAQE,YAAYV,GAASW,KAClC,SAAAC,GAAQ,OAAIA,EAASC,QAAQ,GAAGC,SAASC,+FArKzB,IAAAC,EAAA/G,KAClBgH,MAAM,oDACHN,KAAK,SAAAO,GAAG,OAAIA,EAAIC,SAChBR,KAAK,SAAAS,GAAI,OACRJ,EAAKpB,SAAS,CAAE3B,UAAWmD,EAAKC,WAAa,kBAC3CL,EAAKpB,SACH,CAAE3E,UAAW+F,EAAK1C,cAAc0C,EAAKnH,MAAMoE,YAC3C,kBAAM+C,EAAK5G,gBAAgB4G,EAAKnH,MAAMoB,UAAU,2CAmKxD,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,mBAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZR,KAAKJ,MAAMoB,WACVX,EAAAC,EAAAC,cAAC8G,EAAD,CACErG,UAAWhB,KAAKJ,MAAMoB,UACtBb,gBAAiBH,KAAKG,kBAGzBH,KAAKJ,MAAMqE,iBACV5D,EAAAC,EAAAC,cAAC+G,EAAD,CACE9F,aAAcxB,KAAKwB,aACnBG,OAAQ3B,KAAKJ,MAAM+B,SAGtB3B,KAAKJ,MAAMsC,WACV7B,EAAAC,EAAAC,cAACgH,EAAD,CACExF,gBAAiB/B,KAAK+B,gBACtBG,UAAWlC,KAAKJ,MAAMsC,YAGzBlC,KAAKJ,MAAMuE,iBACV9D,EAAAC,EAAAC,cAACiH,EAAD,CACExE,OAAQhD,KAAKJ,MAAMoD,OACnBW,MAAO3D,KAAKJ,MAAMuE,gBAAgBxD,iBAvNhCC,aCJlB6G,IAASC,OAAOrH,EAAAC,EAAAC,cAACoH,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.0e6bed47.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Country extends Component {\r\n  state = {\r\n    selected: false\r\n  };\r\n\r\n  render() {\r\n    const classes = [];\r\n    const { country, onSelectCountry } = this.props;\r\n\r\n    if (country.selected) {\r\n      classes.push('selected');\r\n    }\r\n    //console.log(country);\r\n\r\n    return (\r\n      <li\r\n        className={classes.join(' ')}\r\n        onClick={() => onSelectCountry(country)}\r\n      >\r\n        {country.name}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react';\r\nimport Country from './Country';\r\n\r\nclass CountriesList extends React.Component {\r\n  renderCountries = () => {\r\n    return this.props.countries.map((country, index) => {\r\n      return (\r\n        <Country\r\n          key={index}\r\n          onSelectCountry={this.props.onSelectCountry}\r\n          country={country}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    //console.log(this.props.countries);\r\n    return <ul className=\"box\">{this.renderCountries()}</ul>;\r\n  }\r\n}\r\n\r\nexport default CountriesList;\r\n","import React, { Component } from 'react';\r\n\r\nclass City extends Component {\r\n  render() {\r\n    const classes = [];\r\n    const { city, onSelectCity } = this.props;\r\n\r\n    if (city.selected) {\r\n      classes.push('selected');\r\n    }\r\n    // console.log(city);\r\n\r\n    return (\r\n      <li className={classes.join(' ')} onClick={() => onSelectCity(city)}>\r\n        {city.name}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default City;\r\n","import React from 'react';\r\nimport City from './City';\r\n\r\nclass CitiesList extends React.Component {\r\n  renderCities = () => {\r\n    return this.props.cities.map((city, index) => {\r\n      return (\r\n        <City key={index} city={city} onSelectCity={this.props.onSelectCity} />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    //console.log(this.props.cities);\r\n    return <ul className=\"box\">{this.renderCities()}</ul>;\r\n  }\r\n}\r\n\r\nexport default CitiesList;\r\n","import React, { Component } from 'react';\r\n\r\nclass Company extends Component {\r\n  render() {\r\n    const classes = [];\r\n    const { company, onSelectCompany } = this.props;\r\n\r\n    if (company.selected) {\r\n      classes.push('selected');\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className={classes.join(' ')}\r\n        onClick={() => onSelectCompany(company)}\r\n      >\r\n        {company.name}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Company;\r\n","import React from 'react';\r\nimport Company from './Company';\r\n\r\nclass CompaniesList extends React.Component {\r\n  renderCompanies = () => {\r\n    return this.props.companies.map((company, index) => {\r\n      return (\r\n        <Company\r\n          key={index}\r\n          company={company}\r\n          onSelectCompany={this.props.onSelectCompany}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <ul className=\"box company\">{this.renderCompanies()}</ul>;\r\n  }\r\n}\r\n\r\nexport default CompaniesList;\r\n","import React from 'react';\r\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nexport class MapContainer extends React.Component {\r\n  render() {\r\n    const style = {\r\n      width: '395px',\r\n      height: '300px'\r\n    };\r\n\r\n    const { lat, lng } = this.props.center;\r\n\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={17}\r\n        style={style}\r\n        initialCenter={{\r\n          lat: parseFloat(lat),\r\n          lng: parseFloat(lng)\r\n        }}\r\n        center={{\r\n          lat: parseFloat(lat),\r\n          lng: parseFloat(lng)\r\n        }}\r\n      >\r\n        <Marker\r\n          title={this.props.title}\r\n          name={this.props.title}\r\n          position={{ lat: parseFloat(lat), lng: parseFloat(lng) }}\r\n        />\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyA0ZHLcOBxzpUPL4MIWdiULswTOwNx774g'\r\n})(MapContainer);\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CountriesList from './CountriesList';\r\nimport CitiesList from './CitiesList';\r\nimport CompaniesList from './CompaniesList';\r\nimport MapContainer from './MapContainer';\r\nimport Geocode from 'react-geocode';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    customers: [],\r\n    countries: [],\r\n    cities: [],\r\n    selectedCountry: '',\r\n    selectedCity: '',\r\n    selectedCompany: '',\r\n    isInitial: true,\r\n    center: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch('http://northwind.servicestack.net/customers.json')\r\n      .then(res => res.json())\r\n      .then(data =>\r\n        this.setState({ customers: data.Customers }, () =>\r\n          this.setState(\r\n            { countries: this.sortCountries(this.state.customers) },\r\n            () => this.onSelectCountry(this.state.countries[0])\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  // Sorting array of countries by numbers cities\r\n\r\n  sortCountries = customers => {\r\n    const countries = customers.reduce((acc, curr) => {\r\n      if (curr.Country in acc) {\r\n        if (!acc[curr.Country].includes(curr.City)) {\r\n          acc[curr.Country].push(curr.City);\r\n        }\r\n      } else {\r\n        acc[curr.Country] = [curr.City];\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    const sortedCountries = Object.keys(countries).sort(\r\n      (a, b) => countries[b].length - countries[a].length\r\n    );\r\n\r\n    return sortedCountries.map((country, index) => {\r\n      return { name: country, selected: false };\r\n    });\r\n  };\r\n\r\n  // Sorting and creating array of cities by numbers of companies\r\n\r\n  sortCities = country => {\r\n    const cities = this.state.customers.reduce((acc, curr) => {\r\n      if (country === curr.Country) {\r\n        if (curr.City in acc) {\r\n          if (!acc[curr.City].includes(curr.CompanyName)) {\r\n            acc[curr.City].push(curr.CompanyName);\r\n          }\r\n        } else {\r\n          acc[curr.City] = [curr.CompanyName];\r\n        }\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    const sortedCities = Object.keys(cities).sort(\r\n      (a, b) => cities[b].length - cities[a].length\r\n    );\r\n\r\n    return sortedCities.map(city => {\r\n      return { name: city, selected: false };\r\n    });\r\n  };\r\n\r\n  // Sorting companies by alphabet\r\n\r\n  sortCompanies = city => {\r\n    const companies = this.state.customers.reduce((acc, curr) => {\r\n      if (city.name === curr.City) {\r\n        if (acc.indexOf(curr.CompanyName) === -1) acc.push(curr.CompanyName);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    const sortedCompanies = companies.sort();\r\n\r\n    return sortedCompanies.map(company => {\r\n      return { name: company, selected: false };\r\n    });\r\n  };\r\n\r\n  onSelectCountry = async country => {\r\n    const updatedCountries = this.state.countries.map(item =>\r\n      item.name === country.name\r\n        ? { ...item, selected: true }\r\n        : { ...item, selected: false }\r\n    );\r\n\r\n    let selectedCity = this.state.selectedCity;\r\n    let cities = this.sortCities(country.name);\r\n\r\n    if (!this.state.selectedCity && this.state.isInitial) {\r\n      selectedCity = cities[0];\r\n    } else if (this.state.selectedCity && !this.state.isInitial) {\r\n      selectedCity = '';\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        countries: updatedCountries,\r\n        selectedCountry: country,\r\n        cities,\r\n        selectedCity\r\n      },\r\n      () => this.onSelectCity(selectedCity)\r\n    );\r\n  };\r\n\r\n  onSelectCity = city => {\r\n    const updatedCities = this.state.cities.map(item =>\r\n      item.name === city.name\r\n        ? { ...item, selected: true }\r\n        : { ...item, selected: false }\r\n    );\r\n\r\n    let selectedCompany = this.state.selectedCompany;\r\n    let companies = this.sortCompanies(city);\r\n\r\n    if (!this.state.selectedCompany && this.state.isInitial) {\r\n      selectedCompany = companies[0];\r\n\r\n      this.setState(\r\n        {\r\n          cities: updatedCities,\r\n          selectedCity: city,\r\n          companies,\r\n          selectedCompany,\r\n          isInitial: false\r\n        },\r\n        () => this.onSelectCompany(selectedCompany)\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      cities: updatedCities,\r\n      selectedCity: city,\r\n      companies\r\n    });\r\n  };\r\n\r\n  onSelectCompany = async company => {\r\n    const selectedCompany = this.state.customers.find(\r\n      item => item.CompanyName === company.name\r\n    );\r\n\r\n    const address = `${selectedCompany.Country} ${selectedCompany.City} ${\r\n      selectedCompany.Address\r\n    }`;\r\n\r\n    const center = await this.getLocation(address);\r\n\r\n    const updatedCompanies = this.state.companies.map(item => {\r\n      return item.name === company.name\r\n        ? { ...item, selected: true }\r\n        : { ...item, selected: false };\r\n    });\r\n\r\n    this.setState({\r\n      companies: updatedCompanies,\r\n      selectedCompany: { ...company, selected: true },\r\n      center\r\n    });\r\n  };\r\n\r\n  getLocation = address => {\r\n    Geocode.setApiKey('AIzaSyA0ZHLcOBxzpUPL4MIWdiULswTOwNx774g');\r\n\r\n    return Geocode.fromAddress(address).then(\r\n      response => response.results[0].geometry.location\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"app\">\r\n          <header>\r\n            <ul className=\"header\">\r\n              <li>Countries</li>\r\n              <li>Cities</li>\r\n              <li>Company</li>\r\n              <li>Map</li>\r\n            </ul>\r\n          </header>\r\n          <div className=\"wrapper\">\r\n            {this.state.countries && (\r\n              <CountriesList\r\n                countries={this.state.countries}\r\n                onSelectCountry={this.onSelectCountry}\r\n              />\r\n            )}\r\n            {this.state.selectedCountry && (\r\n              <CitiesList\r\n                onSelectCity={this.onSelectCity}\r\n                cities={this.state.cities}\r\n              />\r\n            )}\r\n            {this.state.companies && (\r\n              <CompaniesList\r\n                onSelectCompany={this.onSelectCompany}\r\n                companies={this.state.companies}\r\n              />\r\n            )}\r\n            {this.state.selectedCompany && (\r\n              <MapContainer\r\n                center={this.state.center}\r\n                title={this.state.selectedCompany.name}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}